import re
import disnake
import asyncio
import logging
from disnake.ext import commands
from database import Database
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext

ds_token = input("ds_token:")

tg_token = input("tg_token:")

intents = disnake.Intents.default().all()

db = Database()

logging.basicConfig(level=logging.INFO)

tg = Bot(token=tg_token)
dp = Dispatcher(tg, storage=MemoryStorage())

ds = commands.Bot(command_prefix='/', intents=intents)


class Form(StatesGroup):
    switch_notifications = State()


@dp.message_handler(commands=["start"])
async def start_tg(message: types.Message):
    if message.get_args():
        parameter = message.get_args()
        match = re.search(r'(\d+)-(\w+)', parameter)
        user_id = match.group(1)
        server_id = match.group(2)
        await db.update_info(server_id=server_id,
                             user_id_discord=user_id,
                             user_id_telegram=message.chat.id,
                             firstname=message.from_user.first_name,
                             username=message.from_user.username)
        await db.input_ids_telegram_table(message.chat.id)
        await tg.send_message(message.chat.id, "[‚úÖ] –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç!")
    else:
        await db.input_ids_telegram_table(message.chat.id)
        await message.reply('[üëã] –ü—Ä–∏–≤–µ—Ç! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏–∑ Discord. (–ü–æ–¥—Ä–æ–±–Ω–µ–µ /info - –í DISCORD!)')


@dp.message_handler(commands=['notifications'])
async def notifications(message: types.Message):
    telegram_ids = await db.get_user_ids(user_id_telegram=message.chat.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [types.KeyboardButton(str(tg_id)) for tg_id in telegram_ids]
    markup.add(*buttons)
    await Form.switch_notifications.set()
    await message.answer("[‚öñÔ∏è] –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!", reply_markup=markup)


@dp.message_handler(state=Form.switch_notifications)
async def process_switch_notifications(message: types.Message, state: FSMContext):
    server_name = message.text
    check_not = await db.check_notifications(server_name)
    server_id = check_not[1]
    print(type(server_id))
    if check_not[0][0] == "–í—ã–∫–ª—é—á–µ–Ω—ã":
        await db.update_notif(notifications="–í–∫–ª—é—á–µ–Ω—ã", user_id_tg=message.chat.id, server_id=check_not[1])
        kb = [
            [
                types.KeyboardButton(text="/notifications"),
            ]
        ]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=kb)
        await tg.send_message(message.chat.id, "[üü¢] –í—ã –≤–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –¥–∏—Å–∫–æ—Ä–¥–∞!", reply_markup=markup)
    elif check_not[0][0] == '–í–∫–ª—é—á–µ–Ω—ã':
        await db.update_notif(notifications="–í—ã–∫–ª—é—á–µ–Ω—ã", user_id_tg=message.chat.id, server_id=check_not[1])
        kb = [
            [
                types.KeyboardButton(text="/notifications"),
            ]
        ]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=kb)
        await tg.send_message(message.chat.id, "[üî¥] –í—ã –≤—ã–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –¥–∏—Å–∫–æ—Ä–¥–∞!", reply_markup=markup)
    else:
        await tg.send_message("[‚õî] –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")
    await state.finish()


@dp.message_handler(commands=['sendall'])
async def sendall(message: types.Message):
    if message.chat.id == 2023527964:
        text_to_send = message.text[len('/sendall '):].strip()
        ids = await db.output_ids_telegram_table()
        kb = [
            [
                types.KeyboardButton(text="/notifications"),
            ]
        ]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=kb)
        for user in ids:
            await tg.send_message(user, f'{text_to_send}', reply_markup=markup)

        await tg.send_message(message.chat.id, f'–æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å–µ–º [{ids}]')
    else:
        pass


@dp.message_handler()
async def message_in_discord(message: types.Message):
    server_id = await db.check_channel_id(user_telegram_id=message.chat.id)
    text_server = message.text
    server_name = await db.get_server_name()
    if text_server in server_name:
        await message.answer(f'[‚úçüèª] –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ {text_server}:')
        server_channel_id = await db.get_channel_id(server_name=text_server)
        await db.update_last_msg(user_telegram_id=message.chat.id, last_msg=server_channel_id[0])
    elif server_id != 0:
        user_text = message.text
        await on_ready(name=message.from_user.username, message=user_text, channel_id=server_id)
        await db.update_last_msg(user_telegram_id=message.chat.id, last_msg=0)
        markup = types.ReplyKeyboardRemove()
        kb = [
            [
                types.KeyboardButton(text="/notifications"),
            ]
        ]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=kb)
        await message.answer('[‚úÖ] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=markup)
    else:
        telegram_ids = await db.get_user_ids(user_id_telegram=message.chat.id)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = [types.KeyboardButton(str(tg_id)) for tg_id in telegram_ids]
        markup.add(*buttons)
        await message.answer("[‚öñÔ∏è] –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å!", reply_markup=markup)

@ds.event
async def on_message(message):
    if message.author == ds.user:
        return

    user_list = await db.get_id_notifications()

    for userid in user_list:
        await tg.send_message(userid, f'{message.author}:\n{message.content}')

@ds.event
async def on_ready(name, message, channel_id):
    URL = f'[{name}](https://t.me/{name})'
    embed = disnake.Embed(title=f"[üì©] –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º –æ—Ç: ", description=URL, color=disnake.Colour.blue())
    embed.add_field(name='[üìù] –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', value=message)
    embed.set_thumbnail(url="https://cdn2.iconfinder.com/data/icons/round-set-vol-2/120/sending-1024.png")
    channel = ds.get_channel(channel_id)
    await channel.send(embed=embed)


@ds.slash_command(name='start', description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Discord —Å–µ—Ä–≤–µ—Ä–∞")
@commands.has_permissions(administrator=True)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async def start(interaction: disnake.ApplicationCommandInteraction):
    server_id = [interaction.guild.id]
    user_id = interaction.user.id
    channel_id = interaction.channel.id
    server_name = [interaction.guild.name]
    await interaction.send("[‚öôÔ∏è] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–∞—à–µ–≥–æ Discord —Å–µ—Ä–≤–µ—Ä–∞...")
    await db.start(server_id=server_id, channel_id=channel_id, user_id_discord=user_id, server_name=server_name)
    await interaction.send("[‚úÖ] –í–∞—à —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")


@start.error
async def admin_command_error(interaction: disnake.ApplicationCommandInteraction, error):
    if isinstance(error, commands.MissingPermissions):
        await interaction.send("[‚õî] –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)


@ds.slash_command(name='info', description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º")
async def info(interaction: disnake.ApplicationCommandInteraction):
    server_id = interaction.guild.id
    users = await db.info(server_id=server_id)
    user_list = '\n'.join([f'{user[4]} - @{user[5]}' for user in users])
    embed = disnake.Embed(title=f'[üåê] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:\n',
                          color=disnake.Colour.blurple())
    embed.add_field(name='', value=user_list)
    embed.add_field(name="[‚ùì] –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?",
                    value="[üí°] –í–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /stg -> –≤—ã–±—Ä–∞—Ç—å –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å -> –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                    inline=False)
    embed.add_field(name='[‚ùì] –ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç Telegram?',
                    value='[üí°] –í–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /link -> –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ -> –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤ Telegram –±–æ—Ç–µ.',
                    inline=False)
    embed.set_thumbnail(url="https://cdn2.iconfinder.com/data/icons/round-set-vol-2/120/sending-1024.png")
    await interaction.send(embed=embed, ephemeral=True)


@ds.slash_command(name='stg', description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º")
async def stg(interaction: disnake.ApplicationCommandInteraction, name: str, message: str):
    channel_id = interaction.channel_id
    server_id = interaction.guild.id
    users = await db.info(server_id=server_id)
    user_list = [f'{user[4]}' for user in users]
    print(user_list)
    if name in user_list:
        user = interaction.user
        user_id = [f'{user[2]}' for user in users]
        await interaction.send(f"[üì®] –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - {name}!")
        await tg.send_message(user_id[0], f'[{message}] - –æ—Ç {user.name}')
        await db.update_last_msg(user_telegram_id=user_id[0], last_msg=channel_id)
    else:
        await interaction.send(f"[‚ùå] –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Telegram! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /info!", ephemeral=True)


@stg.autocomplete('name')
async def name_autocomplete(interaction: disnake.ApplicationCommandInteraction, current: str):
    server_id = interaction.guild.id
    users = await db.info(server_id=server_id)
    user_list = [f'{user[4]}' for user in users]
    choices = [name for name in user_list if current.lower() in name.lower()]
    return choices


@ds.slash_command(name="dev", description="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞")
async def dev(interaction: disnake.ApplicationCommandInteraction):
    embed = disnake.Embed(title="[üë®üèª‚Äçüíª] –û –±–æ—Ç–µ:", color=0x185200)
    embed.add_field(name="[üõ†] –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", value="@solarezzwhynot")
    embed.add_field(name="[‚öôÔ∏è] –í–µ—Ä—Å–∏—è", value="1.0")
    embed.add_field(name="[üí≥] –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–ø–µ–µ—á–∫–æ–π –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞", value="2200 7007 1699 4750")
    embed.set_thumbnail(url="https://i.pinimg.com/originals/f8/d0/bc/f8d0bc025046ab637a78a09598b905a7.png")
    await interaction.send(embed=embed)


@ds.slash_command(name='link', description='–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∫ Telegram')
async def link(interaction: disnake.ApplicationCommandInteraction):
    try:
        user_id = interaction.author.id
        server_id = interaction.guild.id
        await db.add_user(server_id=server_id, user_id_discord=user_id)
        referral_link = f'https://t.me/solarezzTesting_BOT?start={user_id}-{server_id}'
        await interaction.send(f"[üîó] –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram: {referral_link}", ephemeral=True)
    except:
        await interaction.send("[‚ö†Ô∏è] –í–∞—à Discord –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–µ—Ä–≤–µ—Ä–∞!")


async def main():
    # Start the Telegram bot
    await dp.start_polling(tg)


# Run both bots
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    loop.run_until_complete(ds.start(ds_token))
